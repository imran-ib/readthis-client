generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  USER
  ADMIN
}
enum VoteType {
  VOTE_POST
  VOTE_COMMENT
}
// Facebook style reactions
enum LikeReactions {
  LIKE
  LOVE
  CARE
  FUNNY
  SAD
}


model User {
  id                                       Int      @default(autoincrement()) @id
  email                                    String   @unique
  username                                 String   @unique
  password                                 String   @default("")
  rhandler                                 String   @unique
  firstName                                String?
  LastName                                 String?
  avatar                                   String?   @default("https://res.cloudinary.com/iib-webdevs/image/upload/v1601031013/DontDeleteMe/pngtree-businessman-user-avatar-free-vector-png-image_1538405.jpg")
  OneTimePassword                          Int?
  PasswordResetTokenExpiry                 Float?
  PasswordResetToken                       String?
  isActive                                 Boolean    @default(false)
  lastSeen                                 DateTime   @default(now())
  lastTyped                                DateTime   @default(now())
  posts                                    Post[]
  subs                                     Sub[]
  comments                                 Comment[]
  createdAt                                DateTime   @default(now())
  updatedAt                                DateTime   @updatedAt
  role                                     Role     @default(USER)
  votes                                    Vote[]
  @@index([email, username])
}

model Sub {
  id                                       Int      @default(autoincrement()) @id
  name                                     String   @unique
  title                                    String   @unique
  description                              String?
  imageUrn                                 String?
  bannerUrn                                String?
  author                                   User      @relation(fields: [authorId], references: [id])
  authorId                                 Int         
  posts                                    Post[]
  createdAt                                DateTime   @default(now())
  updatedAt                                DateTime   @updatedAt
  @@index([name])
}

model Comment {
  id                                       Int      @default(autoincrement()) @id
  identifier                               String 
  body                                     String
  author                                   User        @relation(fields: [authorId], references: [id])
  authorId                                 Int         
  posts                                    Post        @relation(fields: [postId], references: [id])
  postId                                   Int         
  votes                                    Vote[]
  commentVoteCount                         Int @default(0)
  userVote Int?
  createdAt                                DateTime   @default(now())
  updatedAt                                DateTime   @updatedAt
}


model Post {
  id                                       Int      @default(autoincrement()) @id
  author                                   User        @relation(fields: [authorId], references: [id])
  authorId                                 Int         // relation scalar field  (used in the `@relation` attribute above)
  identifier                               String 
  title                                    String 
  body                                     String? 
  linkToSub                                String? 
  image                                    String? // not updated
  slug                                     String 
  subName                                  String 
  sub                                      Sub @relation(fields: [postId], references: [id])
  postId                                   Int  
  comments                                 Comment[]
  votes                                    Vote[]
  postVoteCount                            Int @default(0)
  postCommentsCount                        Int @default(0)
  userVote Int? 
  createdAt                                DateTime   @default(now())
  updatedAt                                DateTime   @updatedAt
  @@index([title, id])
}
model Vote {
  id                                       Int        @default(autoincrement()) @id
  VoteType                                 VoteType
  // LikeReactions                            LikeReactions @default(LIKE)
  user                                     User       @relation(fields: [userId], references: [id])
  userId                                   Int         
  post                                     Post?       @relation(fields: [postId], references: [id])
  postId                                   Int? 
  comment                                  Comment?    @relation(fields: [commentId], references: [id])
  commentId                                Int? 
  value                                    Int // three values sent from frontend 1, 0, -1,  ||  1 -> up vote , -1 -> down vote , 0 -> remove vote               
  createdAt                                DateTime   @default(now())
  updatedAt                                DateTime   @updatedAt
}
